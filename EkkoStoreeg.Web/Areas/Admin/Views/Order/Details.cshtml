@using EkkoSoreeg.Utilities
@model OrderVM
@{
    ViewBag.pageTitle = "Order Management";
    ViewBag.CardTitle = "Details Order";
}
<form method="post">
    <section class="section">
        <div class="row">
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">PickUp Details</h5>
                        <input hidden asp-for="orderHeader.Id" />
                        <div class="row mb-3">
                            <label for="inputText" class="col-sm-2 col-form-label">Name</label>
                            <div class="col-sm-10">
                                <input type="text" class="form-control" id="firstname" asp-for="orderHeader.Name">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="inputText" class="col-sm-2 col-form-label">PhoneNumber</label>
                            <div class="col-sm-10">
                                <input type="text" class="form-control" id="phone" asp-for="orderHeader.PhoneNumber">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="inputText" class="col-sm-2 col-form-label">Address</label>
                            <div class="col-sm-10">
                                <input type="text" class="form-control" id="address" asp-for="orderHeader.Address">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="inputText" class="col-sm-2 col-form-label">Notes</label>
                            <div class="col-sm-10">
                                <input type="text" class="form-control" id="additionalinformation" asp-for="orderHeader.AdditionalInformation">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="region" class="col-sm-2 col-form-label">Region</label>
                            <div class="col-sm-10">
                                <select class="form-select" id="region" asp-for="orderHeader.Region">
                                    <option value="">Select a region</option>
                                </select>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="city" class="col-sm-2 col-form-label">City</label>
                            <div class="col-sm-10">
                                <select class="form-select" id="city" asp-for="orderHeader.City">
                                    <option value="">Select a city</option>
                                </select>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="inputText" class="col-sm-2 col-form-label">Email</label>
                            <div class="col-sm-10">
                                <input type="text" class="form-control" id="email" asp-for="orderHeader.Email">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="inputText" class="col-sm-2 col-form-label">Order Date</label>
                            <div class="col-sm-10">
                                <input value="@Model.orderHeader.orderDate.ToShortDateString()" disabled type="text" class="form-control" id="orderDate">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="inputText" class="col-sm-2 col-form-label">Carrier</label>
                            <div class="col-sm-10">
                                <input type="text" class="form-control" id="carrier" asp-for="orderHeader.Carrier">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="inputText" class="col-sm-2 col-form-label">Tracking Number</label>
                            <div class="col-sm-10">
                                <input type="text" class="form-control" id="trackingNumber" asp-for="orderHeader.TrackingNumber">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="inputText" class="col-sm-2 col-form-label">Additional Phone</label>
                            <div class="col-sm-10">
                                <input type="text" class="form-control" id="additionalphonenumber" asp-for="orderHeader.AdditionalPhoneNumber">
                            </div>
                        </div>
                        <input type="hidden" id="selectedRegion" value="@Model.orderHeader.Region" />
                        <input type="hidden" id="selectedCity" value="@Model.orderHeader.City" />
                        <input type="submit" asp-action="UpdateOrderDetails" class="btn btn-primary btn-block" value="Update PickUp" />
                    </div>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Order Summary</h5>
                        <label class="btn btn-outline-primary form-control mb-4">Order Status - @Model.orderHeader.orderStatus</label>
                        @for (int i = 0; i < Model.orderDetails.Count; i++)
                        {
                            <ul class="list-group mb-3">
                                <li class="list-group-item d-flex justify-content-between">
                                    <strong>Name</strong>
                                    <strong>@Model.orderDetails[i].product.Name</strong>
                                </li>
                                <li class="list-group-item d-flex justify-content-between">
                                    <strong>Price (@Model.orderDetails[i].Count)</strong>
                                    <strong>EGP @(Model.orderDetails[i].price * Model.orderDetails[i].Count)</strong>
                                </li>
                                <li class="list-group-item d-flex justify-content-between">
                                    <strong>Count</strong>
                                    <strong>@Model.orderDetails[i].Count</strong>
                                </li>
                                <li class="list-group-item">
                                    <strong>Color</strong>
                                    <input type="text" class="form-control" name="orderDetails[@i].Color" value="@Model.orderDetails[i].Color" />
                                </li>
                                <li class="list-group-item">
                                    <strong>Size</strong>
                                    <input type="text" class="form-control" name="orderDetails[@i].Size" value="@Model.orderDetails[i].Size" />
                                </li>
                                <!-- Ensure there's a hidden input for the ID to bind properly -->
                                <input type="hidden" name="orderDetails[@i].Id" value="@Model.orderDetails[i].Id" />
                            </ul>
                            <hr />
                        }
                        <input type="submit" asp-action="OnPostUpdateOrderDetails" class="btn btn-primary btn-block" value="Update Details" />
                        <hr />
                        <ul class="list-group mb-3">
                            <li class="list-group-item d-flex justify-content-between">
                                <strong>Subtotal:</strong>
                                <strong style="color:#717FE0">EGP @Model.orderHeader.SubTotal</strong>
                            </li>
                            <li class="list-group-item d-flex justify-content-between">
                                <strong>Shipping fee:</strong>
                                <strong style="color:#717FE0">EGP @Model.orderHeader.shippingCost</strong>
                            </li>
                            <li class="list-group-item d-flex justify-content-between">
                                <strong>Total (EGP)</strong>
                                <strong style="color:#717FE0">EGP @Model.orderHeader.totalPrice</strong>
                            </li>
                        </ul>
                        @if (Model.orderHeader.orderStatus == SD.Pending)
                        {
                            <input type="submit" class="btn btn-primary m-1" asp-action="ApproveOrder" name="action" value="ApproveOrder" />
                        }
                        @if (Model.orderHeader.orderStatus == SD.Approve)
                        {
                            <input type="submit" class="btn btn-secondary m-1" onclick="return CheckData()" asp-action="StartShipping" name="action" value="StartShipping" />
                        }
                        @if (Model.orderHeader.orderStatus != SD.Cancelled && Model.orderHeader.orderStatus != SD.Closed)
                        {
                            <button type="submit" class="btn btn-danger m-1" asp-action="CancelOrder" name="action" value="CancelOrder">Cancel Order</button>
                        }
                        @if (Model.orderHeader.orderStatus == SD.Shipped)
                        {
                            <button type="submit" class="btn btn-success m-1" asp-action="CloseOrder" name="action" value="CloseOrder">Close Order</button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </section>
</form>





@section Scripts {
    <script>
        function CheckData() {
            if (document.getElementById("carrier").value == '') {
                Swal.fire({
                    title: "There Is An Error",
                    text: "Please Enter Carrier",
                    icon: "error",
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                });
                return false;
            }
            if (document.getElementById("trackingNumber").value == '') {
                Swal.fire({
                    title: "There Is An Error",
                    text: "Please Enter Tracking Number",
                    icon: "error",
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                });
                return false;
            }
            return true;
        }
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const regionSelect = document.getElementById("region");
            const citySelect = document.getElementById("city");
            const selectedRegion = document.getElementById("selectedRegion").value;
            const selectedCity = document.getElementById("selectedCity").value;

            // Fetch JSON data for regions and cities
            fetch('/Fawary.json')
                .then(response => response.json())
                .then(data => {
                    // Populate regions dropdown
                    data.forEach(region => {
                        const option = document.createElement("option");
                        option.value = region.namePrimaryLang; // use nameSecondaryLang for RTL
                        option.textContent = region.namePrimaryLang; // for RTL language name display
                        regionSelect.appendChild(option);
                    });

                    // Set the selected region and populate the cities dropdown
                    if (selectedRegion) {
                        regionSelect.value = selectedRegion;
                        populateCities(selectedRegion, data);  // Populate cities for the saved region
                    }

                    // Set the saved city value once the cities are populated
                    if (selectedCity) {
                        citySelect.value = selectedCity;
                    }

                    // Event listeners for region and city selection
                    regionSelect.addEventListener("change", function () {
                        if (this.value) {
                            populateCities(this.value, data);
                        } else {
                            citySelect.innerHTML = `<option value="">Select a city</option>`;
                        }
                    });

                    // Function to populate the cities dropdown based on the selected region
                    function populateCities(selectedRegion, data) {
                        citySelect.innerHTML = `<option value="">Select a city</option>`;

                        const regionData = data.find(r => r.namePrimaryLang === selectedRegion);
                        if (regionData && regionData.cityDataModels) {
                            regionData.cityDataModels.forEach(city => {
                                const option = document.createElement("option");
                                option.value = city.namePrimaryLang; // Use nameSecondaryLang for cities
                                option.textContent = city.namePrimaryLang; // Display cities in RTL
                                citySelect.appendChild(option);

                                // Check areaDataModels for additional cities
                                if (city.areaDataModels) {
                                    city.areaDataModels.forEach(area => {
                                        if (area.namePrimaryLang !== city.namePrimaryLang) {
                                            const areaOption = document.createElement("option");
                                            areaOption.value = area.namePrimaryLang;
                                            areaOption.textContent = area.namePrimaryLang;
                                            citySelect.appendChild(areaOption);
                                        }
                                    });
                                }
                            });
                        }
                    }
                })
                .catch(error => console.error('Error fetching JSON:', error));
        });
    </script>
}