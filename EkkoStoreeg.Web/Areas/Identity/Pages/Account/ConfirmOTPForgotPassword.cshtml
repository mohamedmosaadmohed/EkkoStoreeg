@page
@using System.Text.RegularExpressions
@model ConfirmOTPForgotPasswordModel
@{
    ViewData["Title"] = "Confirm Forget Otp";
}
@{
    var isPhone = !string.IsNullOrEmpty(Model.Input.EmailOrPhone) &&
                  Regex.IsMatch(Model.Input.EmailOrPhone, @"^(?:\+20|0)?1[0125]\d{8}$");
}
<section class="py-5">
    <div class="container px-4 px-lg-5 mt-5">
        <div class="row">
            <div class="col-md-5 mt-lg-4">
                <section class="form-section">
                    <form class="formgh" method="post">
                        @Html.AntiForgeryToken()
                        <input type="hidden" asp-for="Input.EmailOrPhone" />
                        <input type="hidden" id="combinedOTP" name="Input.OTP" />
                        @if(isPhone){
                            <span class="mainHeading">Reset Phone Number</span>
                        }
                        else
                        {
                            <span class="mainHeading">Reset Email Address</span>
                        }
                        <p class="otpSubheading">Enter OTP Code</p>
                        <div class="inputContainer">
                            <input required="required" maxlength="1" autocomplete="off" type="number" class="otp-input" id="otp-input1" oninput="moveToNext(this, 'otp-input2')">
                            <input required="required" maxlength="1" autocomplete="off" type="number" class="otp-input" id="otp-input2" oninput="moveToNext(this, 'otp-input3')">
                            <input required="required" maxlength="1" autocomplete="off" type="number" class="otp-input" id="otp-input3" oninput="moveToNext(this, 'otp-input4')">
                            <input required="required" maxlength="1" autocomplete="off" type="number" class="otp-input" id="otp-input4" oninput="combineOTP()">
                        </div>
                        <div asp-validation-summary="ModelOnly" class="text-danger" role="alert" id="error-summary"></div>
                        <button type="submit" class="w-100 btn btn-lg btn-primary mt-2">Verify</button>
                        <span id="timer"></span>
                        <button class="resendBtn" id="resendBtn" onclick="resendOTP(event)">Resend Code</button>
                    </form>
                </section>
            </div>
            <div class="col-md-6 d-none d-md-flex align-items-center">
                <div class="imagediv">
                    <img class="loginimg" src="~/Customer/images/usermanage.png" alt="Login Illustration" />
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        function isDigit(event) {
            const charCode = event.which ? event.which : event.keyCode;
            if (charCode < 48 || charCode > 57) {
                return false;
            }
            return true;
        }
        function moveToNext(current, nextFieldID) {
            if (current.value.length >= 1) {
                document.getElementById(nextFieldID).focus();
            }
            combineOTP();
        }

        function combineOTP() {
            var otp1 = document.getElementById('otp-input1').value;
            var otp2 = document.getElementById('otp-input2').value;
            var otp3 = document.getElementById('otp-input3').value;
            var otp4 = document.getElementById('otp-input4').value;
            var combinedOTP = otp1 + otp2 + otp3 + otp4;
            document.getElementById('combinedOTP').value = combinedOTP;
        }

        function startTimer(duration, display, button) {
            var timer = duration, minutes, seconds;
            var interval = setInterval(function () {
                minutes = parseInt(timer / 60, 10);
                seconds = parseInt(timer % 60, 10);

                minutes = minutes < 10 ? "0" + minutes : minutes;
                seconds = seconds < 10 ? "0" + seconds : seconds;

                display.textContent = "Resend in " + minutes + ":" + seconds;

                if (--timer < 0) {
                    clearInterval(interval);
                    display.textContent = "";
                    button.removeAttribute('disabled'); // When Timer is Run
                }
            }, 1000);
        }
        // for resend OTP
        function resendOTP(event) {
            event.preventDefault();
            document.getElementById('resendBtn').setAttribute('disabled', 'true');
            document.getElementById('timer').textContent = "Resend in 00:45";
            startTimer(45, document.getElementById('timer'), document.getElementById('resendBtn'));

            // Clear existing error messages
            document.getElementById('error-summary').innerHTML = '';

            // AJAX call to resend OTP
            var emailOrPhone = document.querySelector('input[name="Input.EmailOrPhone"]').value;
            fetch('/Identity/Account/ConfirmOTPForgotPassword?handler=ResendOTP', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(emailOrPhone)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        console.log("OTP resent");
                    } else {
                        console.error("Failed to resend OTP");
                    }
                })
                .catch(error => console.error('Error:', error));
        }
        // Start timer when page load
        document.addEventListener("DOMContentLoaded", function () {
            if (!sessionStorage.getItem('page2')) {
                sessionStorage.setItem('page2', 'true');
                startTimer(45, document.getElementById('timer'), document.getElementById('resendBtn'));
            }
            setTimeout(function () {
                sessionStorage.removeItem('page2');
            }, 140000);
        });

        // Ensure the OTP is combined when the form is submitted
        document.querySelector('.formgh').addEventListener('submit', function () {
            combineOTP();
        });
    </script>

}
<style>
    .imagediv {
        background-size: cover;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .loginimg {
        height: auto;
        max-width: 100%;
        margin: auto;
    }

    .formgh {
        background: #fff;
        padding: 30px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 20px 30px;
        gap: 20px;
        position: relative;
        box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.082);
        border-radius: 15px;
    }

    .mainHeading {
        font-size: 1.4em;
        color: rgb(15, 15, 15);
        font-weight: bold;
    }

    .otpSubheading {
        font-size: 1.3em;
        color: black;
        line-height: 18px;
        text-align: center;
    }

    .inputContainer {
        width: 100%;
        display: flex;
        flex-direction: row;
        gap: 10px;
        align-items: center;
        justify-content: center;
    }

    .otp-input {
        background-color: rgb(228, 228, 228);
        height: 50px;
        width: 50px;
        text-align: center;
        border: none;
        border-radius: 7px;
        caret-color: rgb(127, 129, 255);
        color: rgb(44, 44, 44);
        outline: none;
        font-weight: 600;
    }

        .otp-input:focus,
        .otp-input:valid {
            background-color: rgba(127, 129, 255, 0.199);
            transition-duration: .3s;
        }


    .inputContainer input::-webkit-inner-spin-button,
    .inputContainer input::-webkit-outer-spin-button {
        display: none;
    }
        .verifyButton:hover {
            background-color: rgb(144, 145, 255);
            transition-duration: .2s;
        }

    .exitBtn {
        position: absolute;
        top: 5px;
        right: 5px;
        box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.171);
        background-color: rgb(255, 255, 255);
        border-radius: 50%;
        width: 25px;
        height: 25px;
        border: none;
        color: black;
        font-size: 1.12em;
        cursor: pointer;
    }

    .resendNote {
        font-size: 1em;
        color: black;
        width: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 5px;
    }

    .resendBtn {
        background-color: transparent;
        border: none;
        color: rgb(127, 129, 255);
        cursor: pointer;
        font-size: 1.2em;
        font-weight: 700;
    }
    .btn-primary {
        background-color: #717FE0;
        border-color: #717FE0;
        transition: background-color 0.3s, border-color 0.3s;
        border-radius: 23px;
        line-height: 1.2;
    }

        .btn-primary:hover {
            background-color: #666666;
            border-color: #666666;
        }
</style>